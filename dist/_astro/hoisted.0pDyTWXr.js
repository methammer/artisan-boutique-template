import"./hoisted.BQnx23b4.js";const s=document.getElementById("cart-items-container"),l=document.getElementById("empty-cart-message"),u=document.getElementById("cart-summary"),g=document.getElementById("cart-subtotal"),y=document.getElementById("cart-shipping"),v=document.getElementById("cart-total"),o=document.getElementById("checkout-button"),m=5;function c(t){return t.toFixed(2).replace(".",",")+"€"}function i(){const t=JSON.parse(localStorage.getItem("cart")||"[]");for(;s.firstChild&&s.firstChild!==l;)s.removeChild(s.firstChild);if(t.length===0){l.classList.remove("hidden"),u.classList.add("hidden");return}l.classList.add("hidden"),u.classList.remove("hidden");let e=0;t.forEach((r,a)=>{const n=r.price*r.quantity;e+=n;const d=document.createElement("div");d.className="flex items-center justify-between py-4 border-b border-gray-200 last:border-b-0",d.innerHTML=`
        <div class="flex items-center space-x-4">
          <img src="${r.image}" alt="${r.name}" class="w-20 h-20 object-cover rounded-md">
          <div>
            <h3 class="text-lg font-semibold text-brand-primary">${r.name}</h3>
            <p class="text-sm text-gray-500">Prix unitaire: ${c(r.price)}</p>
          </div>
        </div>
        <div class="flex items-center space-x-4">
          <div class="flex items-center border border-gray-300 rounded">
            <button data-index="${a}" class="quantity-decrease px-2 py-1 text-gray-700 hover:bg-gray-100">-</button>
            <input type="number" value="${r.quantity}" min="1" class="w-12 text-center border-l border-r border-gray-300 quantity-input" data-index="${a}" readonly>
            <button data-index="${a}" class="quantity-increase px-2 py-1 text-gray-700 hover:bg-gray-100">+</button>
          </div>
          <p class="text-lg font-semibold w-24 text-right">${c(n)}</p>
          <button data-index="${a}" class="remove-item text-red-500 hover:text-red-700">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
              <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12.56 0c1.153 0 2.24.032 3.223.094C7.071 5.838 7.5 6.318 7.5 6.908v.003c0 .59.429 1.07 1.007 1.116A48.32 48.32 0 0 1 12 8.25c1.153 0 2.24-.032 3.223-.094C15.929 8.12 16.5 7.5 16.5 6.908v-.003c0-.59-.429-1.07-1.007-1.116M6.538 9.75h10.924" />
            </svg>
          </button>
        </div>
      `,s.insertBefore(d,l)}),g.textContent=c(e),y.textContent=c(m),v.textContent=c(e+m),f(),window.dispatchEvent(new CustomEvent("cartUpdated"))}function p(t,e){let r=JSON.parse(localStorage.getItem("cart")||"[]");r[t]&&(r[t].quantity+=e,r[t].quantity<=0&&r.splice(t,1),localStorage.setItem("cart",JSON.stringify(r)),i())}function h(t){let e=JSON.parse(localStorage.getItem("cart")||"[]");e.splice(t,1),localStorage.setItem("cart",JSON.stringify(e)),i()}function f(){document.querySelectorAll(".quantity-decrease").forEach(t=>{t.addEventListener("click",e=>p(parseInt(e.currentTarget.dataset.index),-1))}),document.querySelectorAll(".quantity-increase").forEach(t=>{t.addEventListener("click",e=>p(parseInt(e.currentTarget.dataset.index),1))}),document.querySelectorAll(".remove-item").forEach(t=>{t.addEventListener("click",e=>h(parseInt(e.currentTarget.dataset.index)))})}o.addEventListener("click",async()=>{const t=JSON.parse(localStorage.getItem("cart")||"[]");if(t.length===0){alert("Votre panier est vide.");return}o.disabled=!0,o.textContent="Traitement...";try{const e=await fetch("/api/create-checkout-session",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({cart:t})});if(!e.ok){let a;const n=await e.text();try{a=JSON.parse(n)}catch{throw console.error("Raw error response from server:",n),new Error(`Erreur du serveur: ${e.status} ${e.statusText}. La réponse n'était pas au format JSON.`)}throw new Error(a.error||`Erreur ${e.status} lors de la création de la session de paiement.`)}const{sessionId:r}=await e.json();alert(`Session de paiement (simulation) créée : ${r}. Redirection vers Stripe... (simulation)`),console.log("Mock Stripe Session ID:",r)}catch(e){console.error("Erreur de paiement:",e),alert(`Erreur: ${e.message}`)}finally{o.disabled=!1,o.textContent="Passer à la Caisse"}});document.addEventListener("astro:page-load",i);document.readyState!=="loading"?i():document.addEventListener("DOMContentLoaded",i);
